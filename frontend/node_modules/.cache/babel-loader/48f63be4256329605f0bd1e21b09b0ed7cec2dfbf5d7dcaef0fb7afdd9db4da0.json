{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass AuthService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth-token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor to handle auth errors\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('auth-token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n  async login(email, password) {\n    const params = new URLSearchParams();\n    params.append('email', email);\n    params.append('password', password);\n    const response = await this.api.post('/auth/login', params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const {\n      access_token,\n      user\n    } = response.data;\n\n    // Store token in localStorage\n    localStorage.setItem('auth-token', access_token);\n    return {\n      access_token,\n      user\n    };\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register', userData);\n    return response.data;\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n  logout() {\n    localStorage.removeItem('auth-token');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","AuthService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","email","password","params","URLSearchParams","append","post","access_token","user","data","setItem","register","userData","getCurrentUser","get","logout","authService"],"sources":["/Users/iibrath/projects/TestingIBMVelocity/TestingIBMVelocity/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass AuthService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth-token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor to handle auth errors\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth-token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async login(email, password) {\n    const params = new URLSearchParams();\n    params.append('email', email);\n    params.append('password', password);\n\n    const response = await this.api.post('/auth/login', params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n\n    const { access_token, user } = response.data;\n    \n    // Store token in localStorage\n    localStorage.setItem('auth-token', access_token);\n    \n    return { access_token, user };\n  }\n\n  async register(userData) {\n    const response = await this.api.post('/auth/register', userData);\n    return response.data;\n  }\n\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n\n  logout() {\n    localStorage.removeItem('auth-token');\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,GAAG,GAAGP,KAAK,CAACQ,MAAM,CAAC;MACtBC,OAAO,EAAER,OAAO;MAChBS,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;MACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;MAClD;MACA,OAAOD,MAAM;IACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;IAED;IACA,IAAI,CAACZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;MAAA,IAAAI,eAAA;MACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;QAClCR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;QACrCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;MACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;EACH;EAEA,MAAMU,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAC7BE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAEnC,MAAMT,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAAC4B,IAAI,CAAC,aAAa,EAAEH,MAAM,EAAE;MAC1DtB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAM;MAAE0B,YAAY;MAAEC;IAAK,CAAC,GAAGf,QAAQ,CAACgB,IAAI;;IAE5C;IACAtB,YAAY,CAACuB,OAAO,CAAC,YAAY,EAAEH,YAAY,CAAC;IAEhD,OAAO;MAAEA,YAAY;MAAEC;IAAK,CAAC;EAC/B;EAEA,MAAMG,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAMnB,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAAC4B,IAAI,CAAC,gBAAgB,EAAEM,QAAQ,CAAC;IAChE,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;EAEA,MAAMI,cAAcA,CAAA,EAAG;IACrB,MAAMpB,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAACoC,GAAG,CAAC,UAAU,CAAC;IAC/C,OAAOrB,QAAQ,CAACgB,IAAI;EACtB;EAEAM,MAAMA,CAAA,EAAG;IACP5B,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;EACvC;AACF;AAEA,OAAO,MAAMoB,WAAW,GAAG,IAAIxC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}