{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authService } from '../services/authService';\nexport const useAuthStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  login: async (email, password) => {\n    set({\n      isLoading: true\n    });\n    try {\n      const response = await authService.login(email, password);\n      set({\n        user: response.user,\n        token: response.access_token,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      return response;\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  register: async userData => {\n    set({\n      isLoading: true\n    });\n    try {\n      const response = await authService.register(userData);\n      set({\n        isLoading: false\n      });\n      return response;\n    } catch (error) {\n      set({\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false\n    });\n    // Clear token from localStorage\n    localStorage.removeItem('auth-token');\n  },\n  refreshUser: async () => {\n    const {\n      token\n    } = get();\n    if (!token) return;\n    try {\n      const user = await authService.getCurrentUser();\n      set({\n        user\n      });\n    } catch (error) {\n      // If refresh fails, logout\n      get().logout();\n    }\n  },\n  // Initialize auth state from token\n  initializeAuth: () => {\n    const token = localStorage.getItem('auth-token');\n    if (token) {\n      set({\n        token,\n        isAuthenticated: true\n      });\n      get().refreshUser();\n    }\n  }\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    token: state.token,\n    user: state.user,\n    isAuthenticated: state.isAuthenticated\n  })\n}));","map":{"version":3,"names":["create","persist","authService","useAuthStore","set","get","user","token","isAuthenticated","isLoading","login","email","password","response","access_token","error","register","userData","logout","localStorage","removeItem","refreshUser","getCurrentUser","initializeAuth","getItem","name","partialize","state"],"sources":["/Users/iibrath/projects/TestingIBMVelocity/TestingIBMVelocity/frontend/src/stores/authStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authService } from '../services/authService';\n\nexport const useAuthStore = create(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n\n      login: async (email, password) => {\n        set({ isLoading: true });\n        try {\n          const response = await authService.login(email, password);\n          set({\n            user: response.user,\n            token: response.access_token,\n            isAuthenticated: true,\n            isLoading: false,\n          });\n          return response;\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      register: async (userData) => {\n        set({ isLoading: true });\n        try {\n          const response = await authService.register(userData);\n          set({ isLoading: false });\n          return response;\n        } catch (error) {\n          set({ isLoading: false });\n          throw error;\n        }\n      },\n\n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          isLoading: false,\n        });\n        // Clear token from localStorage\n        localStorage.removeItem('auth-token');\n      },\n\n      refreshUser: async () => {\n        const { token } = get();\n        if (!token) return;\n\n        try {\n          const user = await authService.getCurrentUser();\n          set({ user });\n        } catch (error) {\n          // If refresh fails, logout\n          get().logout();\n        }\n      },\n\n      // Initialize auth state from token\n      initializeAuth: () => {\n        const token = localStorage.getItem('auth-token');\n        if (token) {\n          set({ token, isAuthenticated: true });\n          get().refreshUser();\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        token: state.token,\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,WAAW,QAAQ,yBAAyB;AAErD,OAAO,MAAMC,YAAY,GAAGH,MAAM,CAChCC,OAAO,CACL,CAACG,GAAG,EAAEC,GAAG,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAEhBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChCR,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,WAAW,CAACQ,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACzDR,GAAG,CAAC;QACFE,IAAI,EAAEO,QAAQ,CAACP,IAAI;QACnBC,KAAK,EAAEM,QAAQ,CAACC,YAAY;QAC5BN,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,OAAOI,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdX,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMM,KAAK;IACb;EACF,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5Bb,GAAG,CAAC;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IACxB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,WAAW,CAACc,QAAQ,CAACC,QAAQ,CAAC;MACrDb,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,OAAOI,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdX,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;MACzB,MAAMM,KAAK;IACb;EACF,CAAC;EAEDG,MAAM,EAAEA,CAAA,KAAM;IACZd,GAAG,CAAC;MACFE,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE,KAAK;MACtBC,SAAS,EAAE;IACb,CAAC,CAAC;IACF;IACAU,YAAY,CAACC,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC;EAEDC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAM;MAAEd;IAAM,CAAC,GAAGF,GAAG,CAAC,CAAC;IACvB,IAAI,CAACE,KAAK,EAAE;IAEZ,IAAI;MACF,MAAMD,IAAI,GAAG,MAAMJ,WAAW,CAACoB,cAAc,CAAC,CAAC;MAC/ClB,GAAG,CAAC;QAAEE;MAAK,CAAC,CAAC;IACf,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd;MACAV,GAAG,CAAC,CAAC,CAACa,MAAM,CAAC,CAAC;IAChB;EACF,CAAC;EAED;EACAK,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMhB,KAAK,GAAGY,YAAY,CAACK,OAAO,CAAC,YAAY,CAAC;IAChD,IAAIjB,KAAK,EAAE;MACTH,GAAG,CAAC;QAAEG,KAAK;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;MACrCH,GAAG,CAAC,CAAC,CAACgB,WAAW,CAAC,CAAC;IACrB;EACF;AACF,CAAC,CAAC,EACF;EACEI,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAGC,KAAK,KAAM;IACtBpB,KAAK,EAAEoB,KAAK,CAACpB,KAAK;IAClBD,IAAI,EAAEqB,KAAK,CAACrB,IAAI;IAChBE,eAAe,EAAEmB,KAAK,CAACnB;EACzB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}